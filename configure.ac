AC_PREREQ([2.65])
AC_INIT([shadowvpn],[0.1.7],[clowwindy42@gmail.com])
AC_CONFIG_AUX_DIR([.])

AC_CONFIG_SRCDIR([src/main.c])
AC_CONFIG_HEADERS([config.h])

AM_INIT_AUTOMAKE([1.11 dist-bzip2 tar-ustar foreign subdir-objects])

AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_INSTALL
LT_INIT

AC_HEADER_RESOLV
AC_DEFINE([TARGET_LINUX], [1], [Are we running on Linux?])
AC_CHECK_HEADERS([arpa/inet.h fcntl.h netdb.h stdlib.h string.h sys/socket.h unistd.h])
AC_CHECK_HEADER([linux/if_tun.h],[],[AC_MSG_ERROR([linux/if_tun.h not found.])],[])
AC_CHECK_HEADER([android/log.h],[CFLAGS="$CFLAGS -DHAVE_ANDROID_LOG"; LDFLAGS="$LDFLAGS -llog"],[],[])

AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_TYPE_UINT16_T

AC_CHECK_FUNCS([malloc realloc])
AC_CHECK_FUNCS([inet_ntoa memset select socket strchr strdup strrchr])

AC_ARG_ENABLE([debug],
    [  --enable-debug          build with additional debugging code],
    [CFLAGS="$CFLAGS -g -DDEBUG"])

AM_CONDITIONAL(DEBUG, test x"$debug" = x"true")

AC_ARG_ENABLE([static],
    [  --enable-static         build with static linking],
    [LDFLAGS="$LDFLAGS -static"])

AC_ARG_ENABLE([profile],
    [  --enable-profile        build with profile],
    [CFLAGS="$CFLAGS -pg"])

AC_ARG_ENABLE([analyze],
    [  --enable-analyze        build with analyze],
    [CC="clang --analyze"])

AM_CONDITIONAL(STATIC, test x"$static" = x"true")

AC_CONFIG_FILES([Makefile src/Makefile])
AC_CONFIG_SUBDIRS([libsodium])
AC_OUTPUT
